#!/usr/bin/perl
#######################################################################
# generatejumps:  Generate jump stubs for interrupt forwarding
#
# (C) 1998 Ramon van Handel, The Alliance Operating System Team
#
# HISTORY
# Date      Author      Rev    Notes
# 26/12/98  ramon       1.0    First internal release
# 07/05/99  ramon       1.1    Made initial IRQ stubs irets
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#######################################################################

#######################################################################
# Settings

my $IRQSTART = 0x68;        # The interrupt that is masked to IRQ0
my $IRQEND   = 0x78;        # The interrupt that is after IRQ15

#######################################################################
# END of settings


#######################################################################
# Open the jumps assembly source file

open(JUMPS, ">jump.S");

# Print the copyright text

print JUMPS <<EOCOMMENT;
/*
 * jump.S:  The jump stubs for interrupt forwarding
 *
 * NOTE:  These jump stubs were autogenerated by the generatejumps script
 *
 * (C) 1998 Ramon van Handel, the Alliance Operating System Team
 *
 * HISTORY
 * Date      Author      Rev    Notes
 * 26/12/98  ramon       1.0    First release
 * 29/01/99  ramon       1.1    Global forwarding stub added
 * 07/05/99  ramon       1.2    Changed IRQ-range stubs
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include "sys/asm.h"

EOCOMMENT

$date = localtime;

print JUMPS "/* Stubs autogenerated on $date */\n\n.text\n\n";

print JUMPS <<EOMACRO;

/**************************************************************************/
/* Local forwarding stubs                                                 */
/**************************************************************************/
 
#define JUMPSTUB(nr,stubsym)                                           \\
    .globl stubsym             ;        /* Global entry point      */  \\
    .align 16,0x90             ;        /* Align for speed         */  \\
    stubsym:                   ;        /* Start of exception stub */  \\
        pushl \$##nr            ;        /* Save interrupt number   */  \\
        jmp __forward_local    ;


EOMACRO

# Now loop through all interrupts, and produce the jump stubs

for($i=0x20; $i<$IRQSTART; $i++) {
    printf JUMPS "JUMPSTUB(0x%x,__forward_local_0x%x)  /* Jump stub for interrupt 0x%x */\n", $i, $i, $i;
}

printf JUMPS "\n";

for($i=$IRQEND; $i<=0xff; $i++) {
    printf JUMPS "JUMPSTUB(0x%x,__forward_local_0x%x)  /* Jump stub for interrupt 0x%x */\n", $i, $i, $i;
}

# Here is the generic interrupt forwarding stub

print JUMPS <<EOSTUB;


.align 16,0x90
__forward_local:                   /* The generic forwarding stub */
    SAVEREGS                       /* Save the user registers     */
    subl \$2,%esp                   /* Pad the user data segment   */
    pushw %ds                      /* Save the user data segment  */
    pushw %ss                      /* Switch to kernel data       */
    popw %ds                       /* %ss is always valid (ss0)   */
    cld                            /* GCC likes this              */
    call CKforwardLocalInterrupt   /* Forward interrupt to EK     */

.globl __spurious_int              /* The spurious interrupt stub */
.align 16,0x90                     /* Align for speed             */ 
__spurious_int:                    /* Start of stub               */
    iret                           /* Ignore the spurious int     */


/**************************************************************************/
/* Global forwarding stubs                                                */
/**************************************************************************/

.globl __fwd_global_template       /* The global jump stub        */
__fwd_global_template:             /* Start of template           */
    SAVECREGS                      /* Save the user registers     */
    pushl \$0x000000bb              /* Save interrupt number       */
    movl \$__forward_global,%eax    /* Get the forwarder address   */
    jmp *%eax                      /* Forward the interrupt       */
.globl __fwd_global_template_end   /* End of template             */
__fwd_global_template_end:

.globl __fwd_global_irq_templ_bh   /* IRQ jump stub (master PIC)  */
__fwd_global_irq_templ_bh:         /* Start of template           */
    SAVECREGS                      /* Save the user registers     */
    pushl \$0x000000bb              /* Save interrupt number       */
    movb \$0x20,%al                 /* Send EOI to master PIC so   */
    outb %al,\$0x20                 /* other IRQs can be triggered */
    sti                            /* Enable interrupts           */
    movl \$__forward_global,%eax    /* Get the forwarder address   */
    jmp *%eax                      /* Forward the interrupt       */
.globl __fwd_globl_irq_templ_bhend /* End of template             */
__fwd_globl_irq_templ_bhend:

.globl __fwd_global_irq_templ_th   /* IRQ jump stub (slave PIC)   */
__fwd_global_irq_templ_th:         /* Start of template           */
    SAVECREGS                      /* Save the user registers     */
    pushl \$0x000000bb              /* Save interrupt number       */
    movb \$0x20,%al                 /* Send EOI to slave PIC so    */
    outb %al,\$0xa0                 /* other IRQs can be triggered */
    jmp 1f                         /* Short delay (a few us)      */
1:  jmp 1f                         /* Waits until PIC is finished */
1:  outb %al,\$0x20                 /* Send EOI to master PIC      */
    sti                            /* Enable interrupts           */
    movl \$__forward_global,%eax    /* Get the forwarder address   */
    jmp *%eax                      /* Forward the interrupt       */
.globl __fwd_globl_irq_templ_thend /* End of template             */
__fwd_globl_irq_templ_thend:


.align 16,0x90
__forward_global:                  /* The generic forwarding stub */
    subl \$2,%esp                   /* Pad the user data segment   */
    pushw %ds                      /* Save the user data segment  */
    pushw %ss                      /* Switch to kernel data       */
    popw %ds                       /* %ss is always valid (ss0)   */
    cld                            /* GCC likes this              */
    call CKforwardGlobalInterrupt  /* Forward interrupt to EK     */
    popw %ds                       /* Restore user data segment   */
    addl \$6,%esp                   /* Remove pad + parameter      */
    RESTORECREGS                   /* Restore the user registers  */
    iret                           /* Resturn from interrupt      */

EOSTUB

print JUMPS "/* End of autogenerated stubs */\n";

# We're finished with the assembly stuff

close(JUMPS);

#######################################################################

# Now let's do the C header

open(JUMPS, ">jump.h");

# Print the copyright text


print JUMPS <<EOCOMMENT;
/*
 * jump.h:  External jump stub declarations and loading routine
 *
 * NOTE:  This header file was autogenerated using the generatejumps script
 *
 * (C) 1998 Ramon van Handel, the Alliance Operating System Team
 *
 * HISTORY
 * Date      Author      Rev    Notes
 * 26/12/98  ramon       1.0    First release
 * 07/05/99  ramon       1.1    Changed IRQ-range stubs
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef __SYS_JUMP_H
#define __SYS_JUMP_H

EOCOMMENT

$date = localtime;

print JUMPS "/* Header autogenerated on $date */\n\n";

# Now loop through all interrupts, and produce the jump stubs

for($i=0x20; $i<$IRQSTART; $i++) {
    printf JUMPS "extern VOID __forward_local_0x%x(VOID);  /* Jump stub for interrupt 0x%x */\n", $i, $i;
}

printf JUMPS "\n";

for($i=$IRQEND; $i<=0xff; $i++) {
    printf JUMPS "extern VOID __forward_local_0x%x(VOID);  /* Jump stub for interrupt 0x%x */\n", $i, $i;
}

printf JUMPS "\n";
printf JUMPS "extern VOID __spurious_int(VOID);        /* Spurious interrupt stub      */\n";

# Here is the stub initialisation routine

print JUMPS <<EOINIT;

LOCAL inline VOID CKinitLocalForwards(VOID)
/*
 * Initialise the IDT with the local interrupt forwarding stubs
 *
 * INPUT:
 *     none
 *
 * RETURNS:
 *     none
 */
{
EOINIT

for($i=0x20; $i<$IRQSTART; $i++) {
    printf JUMPS "    CKsetVector(__forward_local_0x%x, 0x%x, (D_PRESENT+D_TRAP+D_DPL3));\n", $i, $i;
}

printf JUMPS "\n";

for($i=$IRQSTART; $i<$IRQEND; $i++) {
    printf JUMPS "    CKsetVector(__spurious_int, 0x%x, (D_PRESENT+D_TRAP+D_DPL3));\n", $i;
}

printf JUMPS "\n";

for($i=$IRQEND; $i<=0xff; $i++) {
    printf JUMPS "    CKsetVector(__forward_local_0x%x, 0x%x, (D_PRESENT+D_TRAP+D_DPL3));\n", $i, $i;
}

print JUMPS "}\n\n/* End of autogenerated data */\n\n#endif\n";

# We're finished !

close(JUMPS);

exit;
